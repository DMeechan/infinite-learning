<p>What are the layers of the OSI model?</p> 	<p>Application Presentation Session Transport Network Data link Physical</p> 
<p>What kinds of data runs on each layer of the OSI model?</p> 	<p>Application - DATA Presentation - DATA Session - DATA Transport - SEGMENTS Network - PACKETS Data link - FRAMES Physical - BITS</p> 
<p>What are example protocols that run on each layer of the OSI model?</p> 	<p>Application - HTTP or DNS or FTP or SSH Presentation - SSL or WPA Session - APIs or sockets Transport - TCP or UDP Network - IPv4 or IPv6 Data link - Wi-Fi or ethernet Physical - cables or hubs</p> 
<p>What are four properties of HTTP?</p> 	<ol> <li>HTTP runs on TCP/IP</li> <li>It <strong>does not maintain a connction</strong> - the server drops the connection after the request / resonse cycle is complete (but IRL we might use a keep-alive to reuse the same TCP connection for multiple requests)</li> <li>It can deliver <strong>any type of data</strong></li> <li>It&#39;s <strong>stateless</strong> - every request assumes no prior communication (so every request contains a bunch of headers, like for auth or whatever)</li> </ol> <p><em>Note that TCP is a connection-oriented transport protocol, whereas UDP is truly connectionless. So technically HTTP is not <code>connectionless</code>, but realistically the connection is dropped after the cycle is complete.</em></p> 
<p>What is a HTTP request made up of?</p> 	<ol> <li>Start line:  METHOD   RESOURCE_URI    HTTP_VERSION</li> <li>Header: key-value pairs, like file type, language, auth token</li> <li>Body: some content, like the details of a todo list task for a POST request</li> </ol> 
<p>What is a HTTP response made up of?</p> 	<ol> <li>Start line:  HTTP_VERSION    STATUS_CODE</li> <li>Header: some key-value pairs</li> <li>Body: the requested data, like a HTML page or JSON blob</li> </ol> 
<p>What does the HTTP request / response cycle look like?</p> 	<ol> <li>Client composes a request, containing a start line (what they&#39;re requesting), header (details like file type or language), and body</li> <li>Client sends that request to the server, thereby initiating a TCP connection</li> <li>Server accepts the TCP connection</li> <li>Server processes the request</li> <li>Server composes a response, containing a start line (mainly containing status code), header (details like file type), and body (containing the requested resource)</li> <li>Server sends the response</li> <li>Server closes the TCP connection</li> </ol> <p><em>But IRL, you&#39;d probably use a keep-alive to hold the TCP connection open so you can re-use it for multiple requests</em></p> 
<p>What is a TCP connection made up of?</p> 	<p>A TCP connection is defined by two <em>endpoints</em>. These endpoints are called <em>sockets</em>.</p> <p>What is a socket? A socket is simply a network interface (IP address) + a port (like 8080)</p> <p>So can have multiple TCP connections going through one socket on a server because each connection is defined by both the client endpoint and server endpoint.</p> <p>&lt;!-- ===</p> <p>A</p> 
